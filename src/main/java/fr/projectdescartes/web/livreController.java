package fr.projectdescartes.web;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import fr.projectdescartes.domain.Auteur;
import fr.projectdescartes.domain.Editeur;
import fr.projectdescartes.domain.Livre;
import fr.projectdescartes.domain.LivreRepository;

@Component
@Controller
@RequestMapping(path="/livre")
public class livreController {
	
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private LivreRepository livreRepository;

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewLivre (@RequestParam String titre, @RequestParam Date dateDeParution,
			@RequestParam String resume, @RequestParam Integer nbreDePages, @RequestParam String image, 
			@RequestParam Editeur editeur, @RequestParam Collection<Auteur> auteurs) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Livre l = new Livre();
		
		l.setTitre(titre);
		l.setDateDeParution(dateDeParution);
		l.setResume(resume);
		l.setNbreDePages(nbreDePages);
		l.setImage(image);
		l.setAuteurs(auteurs);
		l.setEditeur(editeur);
		
		livreRepository.save(l);
		
		return "Saved";
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<Livre> getAllUsers() {
		// This returns a JSON or XML with the books
		return livreRepository.findAll();
	}
	
	@RequestMapping(method = RequestMethod.POST)
	@ResponseStatus(HttpStatus.OK)
	public void creerLivre(@RequestBody Livre livre) {
		System.out.println("creerLivre: " + livre);
	}
	
	@RequestMapping(method = RequestMethod.PUT)
	@ResponseStatus(HttpStatus.OK)
	public void modifierLivre(@RequestBody Livre livre){
		System.out.println("modifier Livre: " + livre);
	}
	
	@RequestMapping(value = "/{titre}", method = RequestMethod.DELETE)
	@ResponseStatus(HttpStatus.OK)
	public void supprimerLivre(@PathVariable(value="titre") String titre){
		System.out.println("supprimerLivre: " + titre);
	}
	
	@RequestMapping(value = "/livre/{titre}", method = RequestMethod.GET)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Livre obtenirUnLivre(@PathVariable(value="titre") String titre) throws ParseException{
		Livre l = new Livre();
		
		DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		Date dateParution = dateFormat.parse("01/02/2014");
		Auteur auteur = new Auteur("E.L.","James", null);
		Editeur editeur = new Editeur("Lgf", null);
		
		l.setDateDeParution(dateParution);
		l.setTitre("Cinquantes nuances de Grey");
		l.setResume("Anastasia Steele, étudiante en littérature, a accepté la proposition de son amie journaliste de prendre sa place pour interviewer Christian Grey");
		l.setNbreDePages(560);
		l.setImage("http://static.fnac-static.com/multimedia/Images/FR/NR/e0/28/54/5515488/1507-1/tsp20140108103057/Cinquante-nuances-de-Grey.jpg");
		l.setEditeur(editeur);
		l.add(auteur);
		
		return l;
	}
	
	@RequestMapping(value = "/livre", method = RequestMethod.GET)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<Livre> obtenirUneListeDeLivres() throws ParseException{
		Auteur auteur = new Auteur("E.L.","James", null);
		Editeur editeur = new Editeur("Lgf", null);
		
		Livre livre1 = new Livre();
		Livre livre2 = new Livre();
		
		livre1.setDateDeParution(new SimpleDateFormat("dd/MM/yyyy").parse("01/02/2015"));
		livre1.setTitre("50 nuances de sombres");
		livre1.setResume("Anastasia Steele, étudiante en littérature, a accepté la proposition de son amie journaliste de prendre sa place pour interviewer Christian Grey");
		livre1.setNbreDePages(500);
		livre1.setImage("http://static.fnac-static.com/multimedia/Images/FR/NR/b4/49/56/5654964/1507-1/tsp20140108103057/Cinquante-nuances-plus-sombres.jpg");
		livre1.setEditeur(editeur);
		livre1.add(auteur);
		
		livre2.setDateDeParution(new SimpleDateFormat("dd/MM/yyyy").parse("01/02/2016"));
		livre2.setTitre("50 nuances de claires");
		livre2.setResume("Anastasia Steele, étudiante en littérature, a accepté la proposition de son amie journaliste de prendre sa place pour interviewer Christian Grey");
		livre2.setNbreDePages(460);
		livre2.setImage("http://static.fnac-static.com/multimedia/Images/FR/NR/9d/8f/56/5672861/1507-1/tsp20140305100037/Cinquante-nuances-plus-claires.jpg");
		livre2.setEditeur(editeur);
		livre2.add(auteur);
		
		List<Livre> listes  = new  ArrayList<Livre>();
		listes.add(livre1);
		listes.add(livre2);
		
		return listes;
	}

}
